{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Emails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","event","console","dir","onLinesChange","target","value","preventDefault","react_default","a","createElement","className","onSubmit","lines","onChange","rows","placeholder","React","Component","Converter","_this2","state","emails","hashes","text","setState","split","map","sha224","join","App_Emails","App","App_Converter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAIMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAJHA,4EAONW,GACXC,QAAQC,IAAIV,MACZA,KAAKJ,MAAMe,cAAcH,EAAMI,OAAOC,4CAG3BL,GACXA,EAAMM,kDAIN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUnB,KAAKO,cACnBQ,EAAAC,EAAAC,cAAA,YAAUJ,MAAOb,KAAKJ,MAAMwB,MAAOC,SAAUrB,KAAKI,aAAckB,KAAK,KAAKC,YAAavB,KAAKJ,MAAM2B,uBArBvFC,IAAMC,WA4BrBC,cACJ,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACjBC,EAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KACDe,cAAgBgB,EAAKhB,cAAcN,KAAnBP,OAAAQ,EAAA,EAAAR,CAAA6B,IACrBA,EAAKC,MAAQ,CACXC,OAAQ,GACRC,OAAQ,IALOH,6EASLI,GACZ/B,KAAKgC,SAAS,CAACH,OAAOE,EAAMD,OAAOC,EAAKE,MAAM,MAAMC,IAAIC,UAAQC,KAAK,yCAKrE,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoB,EAAD,CAAQjB,MAAOpB,KAAK4B,MAAMC,OAAQlB,cAAeX,KAAKW,cAAeY,YAAY,mCADnF,SAEER,EAAAC,EAAAC,cAACoB,EAAD,CAAQjB,MAAOpB,KAAK4B,MAAME,OAAQnB,cAAeX,KAAKW,cAAeY,YAAY,0DAnBnEC,IAAMC,WAgCba,mLALX,OACIvB,EAAAC,EAAAC,cAACsB,EAAD,aAHUf,IAAMC,WC7CNe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e53775ff.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { sha224 } from 'js-sha256';\n\nclass Emails extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    console.dir(this);\n    this.props.onLinesChange(event.target.value);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"col\">\n        <form onSubmit={this.handleSubmit}>\n          <textarea value={this.props.lines} onChange={this.handleChange} rows=\"30\" placeholder={this.props.placeholder} />\n        </form>\n      </div>\n    );\n  }\n}\n\nclass Converter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onLinesChange = this.onLinesChange.bind(this);\n    this.state = {\n      emails: '',\n      hashes: ''\n    };\n  }\n\n  onLinesChange(text) {\n    this.setState({emails:text, hashes:text.split('\\n').map(sha224).join('\\n')});\n  }\n\n  render() {\n\n    return (\n        <div className=\"row\">\n          <Emails lines={this.state.emails} onLinesChange={this.onLinesChange} placeholder=\"Plak hier de e-mailadressen...\"></Emails>â†’\n          <Emails lines={this.state.hashes} onLinesChange={this.onLinesChange} placeholder=\"Kopieer daarna hier de code om bij te houden.\"></Emails>\n        </div>\n    );\n  }\n}\n\n  class App extends React.Component {\n    render() {\n      return (\n          <Converter />\n      );\n    }\n  }\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}